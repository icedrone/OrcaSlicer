on:
  workflow_call:
    inputs:
      cache-key:
        required: true
        type: string
      cache-path:
        required: true
        type: string
      os:
        required: true
        type: string
      arch:
        required: false
        type: string

jobs:
  build_orca_macos_14:
    name: Build OrcaSlicer
    runs-on: ${{ inputs.os }}
    env:
      date:
      ver:
      ver_pure:

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          lfs: "true"

      - name: load cached deps
        uses: actions/cache@v4
        with:
          path: ${{ inputs.cache-path }}
          key: ${{ inputs.cache-key }}
          fail-on-cache-miss: true

      - uses: lukka/get-cmake@latest
        with:
          cmakeVersion: "~3.28.0" # use most recent 3.28.x version

      - name: Get the version and date on Ubuntu and macOS
        run: |
          chmod +x ./.github/workflows/scripts/get_version_date_ubuntu_macos.sh
        shell: bash

      - name: Install tools mac
        if: inputs.os == 'macos-14'
        run: |
          brew install tree ninja libtool
          brew list
          mkdir -p ${{ github.workspace }}/deps/build_${{inputs.arch}}
          mkdir -p ${{ github.workspace }}/deps/build_${{inputs.arch}}/OrcaSlicer_dep_${{inputs.arch}}
          tree ${{ github.workspace }}/deps/build_${{inputs.arch}}/OrcaSlicer_dep_${{inputs.arch}}

      - name: Build slicer mac
        if: inputs.os == 'macos-14'
        working-directory: ${{ github.workspace }}
        run: |
          ./build_release_macos.sh -s -n -x -a ${{inputs.arch}} -t 10.15 -1

      # Thanks to RaySajuuk, it's working now
      - name: Sign app and notary
        if: (github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/heads/release/')) && inputs.os == 'macos-14'
        working-directory: ${{ github.workspace }}
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
          CERTIFICATE_ID: ${{ secrets.MACOS_CERTIFICATE_ID }}
        run: |
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode --output $CERTIFICATE_PATH
          security create-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p $KEYCHAIN_PASSWORD $KEYCHAIN_PATH
          security import $CERTIFICATE_PATH -P $P12_PASSWORD -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple:,codesign: -s -k $P12_PASSWORD $KEYCHAIN_PATH
          codesign --deep --force --verbose --options runtime --timestamp --entitlements ${{ github.workspace }}/scripts/disable_validation.entitlements --sign "$CERTIFICATE_ID" ${{ github.workspace }}/build_${{inputs.arch}}/OrcaSlicer/OrcaSlicer.app
          ln -s /Applications ${{ github.workspace }}/build_${{inputs.arch}}/OrcaSlicer/Applications
          hdiutil create -volname "OrcaSlicer" -srcfolder ${{ github.workspace }}/build_${{inputs.arch}}/OrcaSlicer -ov -format UDZO OrcaSlicer_Mac_${{inputs.arch}}_${{ env.ver }}.dmg
          codesign --deep --force --verbose --options runtime --timestamp --entitlements ${{ github.workspace }}/scripts/disable_validation.entitlements --sign "$CERTIFICATE_ID" OrcaSlicer_Mac_${{inputs.arch}}_${{ env.ver }}.dmg
          xcrun notarytool store-credentials "notarytool-profile" --apple-id "${{ secrets.APPLE_DEV_ACCOUNT }}" --team-id "${{ secrets.TEAM_ID }}" --password "${{ secrets.APP_PWD }}"
          xcrun notarytool submit "OrcaSlicer_Mac_${{inputs.arch}}_${{ env.ver }}.dmg" --keychain-profile "notarytool-profile" --wait
          xcrun stapler staple OrcaSlicer_Mac_${{inputs.arch}}_${{ env.ver }}.dmg

      - name: Create DMG without notary
        if: github.ref != 'refs/heads/main' && inputs.os == 'macos-14'
        working-directory: ${{ github.workspace }}
        run: |
          ln -s /Applications ${{ github.workspace }}/build_${{inputs.arch}}/OrcaSlicer/Applications
          hdiutil create -volname "OrcaSlicer" -srcfolder ${{ github.workspace }}/build_${{inputs.arch}}/OrcaSlicer -ov -format UDZO OrcaSlicer_Mac_${{inputs.arch}}_${{ env.ver }}.dmg

      - name: Upload artifacts mac
        if: inputs.os == 'macos-14'
        uses: actions/upload-artifact@v4
        with:
          name: OrcaSlicer_Mac_${{inputs.arch}}_${{ env.ver }}
          path: ${{ github.workspace }}/OrcaSlicer_Mac_${{inputs.arch}}_${{ env.ver }}.dmg

      - name: Deploy Mac release
        if: github.ref == 'refs/heads/main' && inputs.os == 'macos-14'
        uses: WebFreak001/deploy-nightly@v3.1.0
        with:
          upload_url: https://uploads.github.com/repos/SoftFever/OrcaSlicer/releases/137995723/assets{?name,label}
          release_id: 137995723
          asset_path: ${{ github.workspace }}/OrcaSlicer_Mac_${{inputs.arch}}_${{ env.ver }}.dmg
          asset_name: OrcaSlicer_Mac_${{inputs.arch}}_${{ env.ver }}.dmg
          asset_content_type: application/octet-stream
          max_releases: 1 # optional, if there are more releases than this matching the asset_name, the oldest ones are going to be deleted
      - name: checksum github action outputs
        run: |
          echo "::set-output name=checksum::$(shasum -a 256 ${{ github.workspace }}/OrcaSlicer_Mac_${{inputs.arch}}_${{ env.ver }}.dmg | cut -d ' ' -f 1)"
  write:
    runs-on: ubuntu-latest
    needs: [build_orca_macos_14]
    steps:
      ## Write for matrix outputs workaround
      - uses: cloudposse/github-action-matrix-outputs-write@v1
        id: out
        with:
          matrix-step-name: ${{ inputs.matrix-step-name }}
          matrix-key: ${{ inputs.matrix-key }}
          outputs: |-
            checksum: ${{ needs.build_orca_macos_14.outputs.checksum }}
